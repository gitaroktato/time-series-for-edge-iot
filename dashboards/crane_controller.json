[{"apiVersion":"influxdata.com/v2alpha1","kind":"Dashboard","metadata":{"name":"quirky-cerf-58a001"},"spec":{"charts":[{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"faucMsthgbDPval9Wy6mx","name":"Nineteen Eighty Four","type":"scale","hex":"#31C0F6"},{"id":"rHzOB4cUVikRI7sAdcrTA","name":"Nineteen Eighty Four","type":"scale","hex":"#A500A5"},{"id":"dcVJbqWM6kCw07sg7j1V5","name":"Nineteen Eighty Four","type":"scale","hex":"#FF7E27"}],"geom":"line","height":4,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Controller current data","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"controller\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":3,"widthRatio":1,"xCol":"_time","yCol":"_value"},{"axes":[{"name":"x"},{"name":"y"}],"colors":[{"hex":"#31C0F6"},{"hex":"#BC00B8"},{"hex":"#FF7E27"}],"height":4,"kind":"Scatter","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Gyro points","queries":[{"query":"import \"influxdata/influxdb/schema\"\nfrom(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"gyro\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\" or r[\"_field\"] == \"z\")\n  |> schema.fieldsAsCols()\n  |> yield(name: \"points\")"}],"staticLegend":{},"width":3,"xCol":"x","yCol":"y","yPos":4},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"faucMsthgbDPval9Wy6mx","name":"Nineteen Eighty Four","type":"scale","hex":"#31C0F6"},{"id":"rHzOB4cUVikRI7sAdcrTA","name":"Nineteen Eighty Four","type":"scale","hex":"#A500A5"},{"id":"dcVJbqWM6kCw07sg7j1V5","name":"Nineteen Eighty Four","type":"scale","hex":"#FF7E27"}],"geom":"line","height":4,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Controller motion rate","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"import \"influxdata/influxdb/schema\"\nimport \"math\"\n\nfrom(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"controller\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with _value: math.mMax(x:r.x, y:r.y) }))  \n  |> yield(name: \"derivative\")"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"xCol":"_time","xPos":3,"yCol":"_value"},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"MOVojKBDkXAog8HTWeWIT","name":"Nineteen Eighty Four","type":"scale","hex":"#31C0F6"},{"id":"B8W6tl5xk07Jg5v8pB3CR","name":"Nineteen Eighty Four","type":"scale","hex":"#A500A5"},{"id":"aC8Oba-GneeFDhmtLVyMF","name":"Nineteen Eighty Four","type":"scale","hex":"#FF7E27"}],"geom":"line","height":4,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Gyro Timeline","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"gyro\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\" or r[\"_field\"] == \"z\")\n  |> yield(name: \"gyro\")"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"xPos":3,"yPos":4},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"ruby","type":"max","hex":"#BF3D5E","value":1024}],"decimalPlaces":2,"height":3,"kind":"Gauge","name":"Too crazy moves!","queries":[{"query":"import \"influxdata/influxdb/schema\"\nimport \"math\"\ncrazynessThreshold = 250\n\nfrom(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"controller\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with _value: math.mMax(x:r.x, y:r.y) }))  \n  |> filter(fn: (r) => r._value > crazynessThreshold)\n  |> yield(name: \"too_crazy_moves\")"}],"staticLegend":{},"width":3,"xPos":9},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"fire","type":"max","hex":"#DC4E58","value":100}],"decimalPlaces":2,"height":3,"kind":"Gauge","name":"Too much vibration!","queries":[{"query":"import \"math\"\nmaxVibration = 4000\n\nfrom(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"gyro\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\" or r[\"_field\"] == \"z\")\n  |> map(fn: (r) => ({ r with _value: math.abs(x: r._value)}))  \n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\n  |> filter(fn: (r) => r._value > maxVibration)  \n  |> yield(name: \"mean\")"}],"staticLegend":{},"width":3,"xPos":9,"yPos":3},{"axes":[{"name":"x"},{"name":"y"}],"binSize":10,"colors":[{"hex":"#000004"},{"hex":"#110a30"},{"hex":"#320a5e"},{"hex":"#57106e"},{"hex":"#781c6d"},{"hex":"#9a2865"},{"hex":"#bc3754"},{"hex":"#d84c3e"},{"hex":"#ed6925"},{"hex":"#f98e09"},{"hex":"#fbb61a"},{"hex":"#f4df53"}],"height":2,"kind":"Heatmap","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Drunk events","queries":[{"query":"import \"influxdata/influxdb/schema\"\nimport \"math\"\n\nmaxVibration = 4000\ncrazynessThreshold = 250\n\ncheckCrazynessAndVibration = (controllerMax, gyroMax) => {\n  return if (controllerMax > crazynessThreshold and gyroMax > maxVibration) then\n     1 else 0\n}\n\ncontrollerDerivative = from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"controller\")\n  |> filter(fn: (r) => r[\"_field\"] == \"x\" or r[\"_field\"] == \"y\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with _value: math.mMax(x:r.x, y:r.y) }))  \n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\n\ngyroMax = from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"gyro\")\n  |> map(fn: (r) => ({ r with _value: math.abs(x: r._value)}))  \n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with _value: math.mMax(x:r.x, y:r.y) })) \n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\n\n//controllerDerivative |> yield(name: \"controller derivative\")\n//gyroMax |> yield(name: \"gyro max\")\n\njoin(tables: {key1: controllerDerivative, key2: gyroMax}, on: [\"_time\"], method: \"inner\")\n  |> drop(columns: [\"_measurement_key1\", \"_measurement_key2\", \"_start_key1\", \"_start_key2\", \"_stop_key1\", \"_stop_key2\"])\n  |> map(fn: (r) => ({ r with _value: checkCrazynessAndVibration(controllerMax: r._value_key1, gyroMax: r._value_key2) }))\n  //|> filter(fn: (r) => r._value == true)"}],"staticLegend":{},"width":3,"xCol":"_time","xPos":9,"yCol":"_value","yPos":6}],"name":"Crane Controller"}}]